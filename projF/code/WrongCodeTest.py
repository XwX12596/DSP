# test.py
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams.update({'font.size': 15})

def genPAM(N, M):
    return (np.random.randint(-M, M + 1, (N)))

def genNoise(y, snr = 20):
    Es = np.mean(y**2)
    sigma = np.sqrt(Es / 10 ** ( snr / 10))
    n = sigma * np.random.randn(len(y))
    return n + y, n

def reX_estimate(y, h):
    N = len(y)
    M = len(h)
    print("Length of y is ", N,", Length of h is ", M)
    xh = y.copy()
    for n in range(N):
        print("Info: n is now ", n)
        for m in range(1, min(M, n)):
            xh[n] -= h[m] * xh[n - m]
            print("xh[", n,"] -= h[",m,"] * xh[",n - m,"]", h[m], xh[n - m])
        xh[n] /= h[0]
        xh[n] = np.round(xh[n], 8) #Exclude Error generated by calculation accuracy
    return xh

def reX_estimate_new(y, h):
    N = len(y)
    M = len(h)
    print("Length of y is ", N,", Length of h is ", M)
    xh = y.copy()
    for n in range(N):
        print("Info: n is now ", n)
        for m in range(1, min(M, n + 1)):
            xh[n] -= h[m] * xh[n - m]
            print("xh[", n,"] -= h[",m,"] * xh[",n - m,"]", h[m], xh[n - m], xh[n])
        xh[n] /= h[0]
        xh[n] = np.round(xh[n], 8) #Exclude Error generated by calculation accuracy
    return xh

N = 64
Nc = 3
M = 4

x = genPAM(N, M)
h = np.random.randn(Nc)
# h = [1, -1.2, -1]

y = np.convolve(x, h)
# y, n = genNoise(y, snr = 30)
xh = reX_estimate(y, h)
xh_new = reX_estimate_new(y, h)

fig = plt.figure(figsize=(12, 8))

ax = fig.add_subplot(2, 2, 1)
ax.plot(x)
ax.set_title('x')
ax = fig.add_subplot(2, 2, 2)
ax.set_title('y = x * h + n, roots of h are ' + str(np.abs(np.roots(h))))
ax.plot(y)
ax = fig.add_subplot(2, 2, 3)
ax.set_title('xh (Probable Wrong Recovery)')
ax.plot(xh)
ax = fig.add_subplot(2, 2, 4)
ax.set_title('xh (My Recovery)')
ax.plot(xh_new)

plt.show()